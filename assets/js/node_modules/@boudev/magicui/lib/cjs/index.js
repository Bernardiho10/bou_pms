import { __exports as cjs } from '../../../../../_virtual/index.js';

Object.defineProperty(cjs, "__esModule", { value: true });
cjs.DeleteRequest = cjs.PostRequest = cjs.GetRequest = cjs.Fetch = cjs.getFormatter = cjs.MoneyFormatter = cjs.DateFormatter = AbstractCustomElement_1 = cjs.AbstractCustomElement = cjs.MagicElement = MagicView_1 = cjs.MagicView = MagicViewModel_1 = cjs.MagicViewModel = void 0;
class MagicViewModel {
    constructor(data) {
        if (data) {
            for (let k in data) {
                // @ts-ignore
                this[k] = data[k];
            }
        }
        return this;
    }
    hydrate(data) {
        if (data) {
            for (let prop in this) {
                if (data[prop]) {
                    this[prop] = this._cast(prop, data[prop]);
                }
            }
        }
        return this;
    }
    get(name) {
        let model = this.toRecord();
        let parts = name.split("."); // todo review this later to see how we can make it go more than 2 levels
        if (model[parts[0]] != undefined) {
            if (parts.length > 1) {
                return model[parts[0]][parts[1]];
            }
            else {
                return model[parts[0]];
            }
        }
        return this.toRecord()[name];
    }
    set(name, value) {
        for (let e in this) {
            if (e == name) {
                this[e] = this._cast(e, value);
            }
        }
    }
    toRecord() {
        let data = {};
        for (let e in this) {
            // console.log("toRecord", e, typeof this[e])
            if (this[e] instanceof Date) {
                // @ts-ignore
                data[e] = this[e].toJSON();
                continue;
            }
            data[e] = this[e];
        }
        return data;
    }
    _cast(prop, value) {
        // @ts-ignore
        switch (typeof this[prop]) {
            case "number":
                return Number(value);
            case "boolean":
                return Boolean(value);
            default:
                // @ts-ignore
                if (this[prop] instanceof Date) {
                    return new Date(value);
                }
        }
        return value;
    }
}
var MagicViewModel_1 = cjs.MagicViewModel = MagicViewModel;
class MagicView {
    constructor(viewModel, root) {
        this.elements = [];
        this.PARAMS = new URLSearchParams(location.search);
        this.root = document;
        this.viewModel = viewModel;
        if (root != undefined && root != document) {
            this.root = root;
        }
        this.bindEventHandlerMethods();
    }
    registerElement(name, elementOrElementID, data) {
        if (typeof elementOrElementID == "string") {
            elementOrElementID = this.root.getElementById(elementOrElementID);
        }
        if (this.viewModel && elementOrElementID) {
            let el = new MagicElement(this, elementOrElementID, name, this.viewModel.get(name));
            el._data = data;
            if (elementOrElementID instanceof AbstractCustomElement) {
                elementOrElementID.parent = this.root.getElementById(elementOrElementID.id);
            }
            this.elements.push(el);
            this.attachEventListeners(el);
            return el;
        }
        console.log({ viewModel: this.viewModel, element: elementOrElementID, name: name });
        throw new Error("registerElement failed. view model is not set or element does not exist");
    }
    createElement(element) {
        if (element) {
            return new MagicElement(this, element, "", null);
        }
        throw new Error("createElement failed. element does not exist");
    }
    attachEventListeners(el) {
        if (el.isInputElement()) {
            let self = this;
            const updateViewModel = function () {
                console.log("calling dispatch");
                let elemValue = this.value;
                if (this instanceof HTMLInputElement && this.type == "checkbox") {
                    elemValue = this.checked;
                }
                self.viewModel.set(el.name, elemValue);
                self.render();
            };
            if ((el.element instanceof HTMLInputElement && (el.element.type == "text" || el.element.type == "password")) || el.element instanceof HTMLTextAreaElement) {
                el.element.addEventListener("keyup", updateViewModel);
            }
            el.element.addEventListener("change", updateViewModel);
            if (el.element instanceof HTMLInputElement && el.element.type == "date") {
                el.element?.addEventListener("focus", function (event) {
                    this.showPicker();
                });
            }
        }
    }
    bindEventHandlerMethods() {
        const prototype = Object.getPrototypeOf(this);
        const methodNames = Object.getOwnPropertyNames(prototype)
            .filter(name => typeof prototype[name] === 'function' && name !== 'constructor' && name.startsWith("do"));
        for (const name of methodNames) {
            // @ts-ignore
            this[name] = this[name].bind(this);
        }
    }
    render() {
        console.log("viewModel.render", this);
        this.elements.map((element) => {
            element.bind(this.viewModel);
        });
    }
}
var MagicView_1 = cjs.MagicView = MagicView;
class MagicElement {
    constructor(view, element, name, value) {
        this.name = "";
        this.value = [];
        this.view = view;
        this.name = name;
        this.value.push(value);
        this.element = element;
    }
    bind(vm) {
        const vmValue = vm.get(this.name);
        if (this.value[0] != vmValue) {
            console.log("change detected, binding element", this.name, vmValue);
            this.value = [vmValue];
        }
        this.render();
    }
    isInputElement() {
        return this.element instanceof HTMLInputElement ||
            this.element instanceof HTMLSelectElement ||
            this.element instanceof HTMLTextAreaElement;
    }
    setData(data) {
        this._data = data;
        this.render();
    }
    addEventTrigger(on, eventHandler) {
        this.element.addEventListener(on, (event) => {
            eventHandler(this.view, event);
        });
        return this;
    }
    render() {
        console.log("element.render", this.name, this.value);
        switch (true) {
            case this.element instanceof HTMLInputElement:
            case this.element instanceof HTMLTextAreaElement:
                switch (this.element.type) {
                    case "date":
                        this.element.value = getFormatter("date").format(this.value[0], "yyyy-mm-dd");
                        break;
                    case "datetime-local":
                        this.element.value = getFormatter("date").format(this.value[0], "yyyy-mm-ddThh:ii");
                        break;
                    default:
                        this.element.value = this.value[0];
                }
                break;
            case this.element instanceof HTMLSelectElement:
                // render select options
                console.log("rendering select", this.name, this._data);
                if (typeof this._data == "object") {
                    this.element.innerHTML = "";
                    for (let opt of this._data) {
                        let sOpt = document.createElement("option");
                        sOpt.value = opt["value"];
                        sOpt.label = opt["label"];
                        this.element.appendChild(sOpt);
                    }
                }
                for (let opt of this.element.options) {
                    opt.selected = opt.value == this.value[0];
                }
                break;
            case this.element instanceof HTMLAnchorElement:
                this.element.href = this.value[0];
                break;
            case this.element instanceof HTMLImageElement:
            case this.element instanceof HTMLIFrameElement:
                this.element.src = this.value[0];
                break;
            case this.element instanceof AbstractCustomElement:
                console.log("rendering custom-element", this.name, this.value[0]);
                this.element.render(this.value[0]);
                break;
            default:
                let value = this.value[0];
                if (typeof value == "object") {
                    const template = this.element.outerHTML;
                    if (!Array.isArray(value)) {
                        value = [value];
                    }
                    this._renderTemplate(template, value);
                    break;
                }
                const format = this.element.getAttribute("data-magic-format");
                if (format != null) {
                    const f = format.slice(0, format.indexOf(","));
                    const d = format.slice(format.indexOf(",") + 1); // additional data used for decorating
                    value = getFormatter(f).format(value, d);
                }
                const bindMode = this.element.dataset.magicBind;
                switch (bindMode) {
                    case "class":
                        this.element.classList.add(value);
                        break;
                    default:
                        this.element.textContent = value;
                }
        }
    }
    _renderTemplate(template, data) {
        const idPrefix = this.element.id + ".";
        let shadowHost = document.createElement("div");
        this.element.replaceWith(shadowHost);
        let shadow = shadowHost.attachShadow({ mode: "open" });
        const links = document.head.getElementsByTagName("link");
        for (let i = 0; i < links.length; i++) {
            shadow.appendChild(links[i].cloneNode());
        }
        data.map((record) => {
            let d = document.createElement("div");
            d.innerHTML = template.replaceAll(idPrefix, "");
            let registry = [];
            this._traverseDom(d, registry);
            let t = d.firstChild;
            t.removeAttribute("id");
            t.classList.add(this.element.id);
            let viewRoot = document.createElement("div").attachShadow({ mode: "open" });
            viewRoot.appendChild(d.firstChild);
            const view = new MagicView(new MagicViewModel(record), viewRoot);
            registry.map((el) => {
                let id = el.id;
                let name = el.id;
                if (el.id.indexOf(":") > 0) {
                    [id, name] = el.id.split(":");
                }
                el.id = id;
                if (record[name] != undefined) {
                    view.registerElement(name, id);
                }
            });
            view.render();
            view.elements.map((el) => {
                el.element.classList.add(el.element.id);
                el.element.removeAttribute("id");
            });
            shadow.appendChild(viewRoot.firstChild);
        });
    }
    _traverseDom(element, result = []) {
        // Base case: if the element is null, return
        if (!element)
            return;
        if (element.id.length > 0) {
            result.push(element);
        }
        // Recursively traverse the children of the current element
        let child = element.firstElementChild;
        while (child) {
            this._traverseDom(child, result);
            child = child.nextElementSibling;
        }
    }
}
cjs.MagicElement = MagicElement;
class AbstractCustomElement extends HTMLElement {
    constructor(id) {
        super();
        this.template = "";
        this.parent = null;
        this.transformer = function (data) {
            return data;
        };
        if (id) {
            this.id = id;
        }
        this.dom = this.attachShadow({ mode: "open" });
    }
    fromTemplate(template) {
        let d = document.createElement("div");
        d.innerHTML = template;
        return d.firstChild;
    }
    transform(data) {
        console.log("transforming table", data);
        return this.transformer(data);
    }
    render(data, parentNode) {
        throw new Error(`custom element (${this.localName}) does not implement render`);
    }
}
var AbstractCustomElement_1 = cjs.AbstractCustomElement = AbstractCustomElement;
class DefaultFormatter {
    format(v, d) {
        return v;
    }
}
/**
 m = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
 mm = 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12
 mmm = Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec
 mmmm = January, February, March, April, May, June, July, August, September, October, November, December
 yyyy = 2024
 yy = 24
 x = 1st, 2nd, 3rd, 4th, ... 31st
 d = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ... 31
 dd = 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
 ddd = Sun, Mon, Tue, Wed, Thu, Fri, Sat
 dddd = Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday
 hh = 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12
 HH = 00, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
 ii = 00, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59
 ss = 00, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59
 tt = AM, PM
 t = A, P
 ttt = GMT, UTC, IST, BST, EDT, PDT
 tttt = Greenwich Mean Time, Coordinated Universal Time, Indian Standard Time, British Summer Time, Eastern Daylight Time, Pacific Daylight Time
 **/
class DateFormatter {
    format(v, d) {
        const suffix = ["st", "nd", "rd", "th", "th", "th", "th", "th", "th", "th", "th", "th", "th", "th", "th", "th", "th", "th", "th", "th", "st", "nd", "rd", "th", "th", "th", "th", "th", "th", "th", "st"];
        const ampms = { "att": "AM", "at": "A", "ptt": "PM", "pt": "P" }; // tt, t
        const months = [{ "mm": "01", "mmm": "Jan", "mmmm": "January" }, { "mm": "02", "mmm": "Feb", "mmmm": "February" }, { "mm": "03", "mmm": "Mar", "mmmm": "March" }, { "mm": "04", "mmm": "Apr", "mmmm": "April" }, { "mm": "05", "mmm": "May", "mmmm": "May" }, { "mm": "06", "mmm": "Jun", "mmmm": "June" }, { "mm": "07", "mmm": "Jul", "mmmm": "July" }, { "mm": "08", "mmm": "Aug", "mmmm": "August" }, { "mm": "09", "mmm": "Sep", "mmmm": "September" }, { "mm": "10", "mmm": "Oct", "mmmm": "October" }, { "mm": "11", "mmm": "Nov", "mmmm": "November" }, { "mm": "12", "mmm": "Dec", "mmmm": "December" }];
        const days = [{ "ddd": "Sun", "dddd": "Sunday" }, { "ddd": "Mon", "dddd": "Monday" }, { "ddd": "Tue", "dddd": "Tuesday" }, { "ddd": "Wed", "dddd": "Wednesday" }, { "ddd": "Thu", "dddd": "Thursday" }, { "ddd": "Fri", "dddd": "Friday" }, { "ddd": "Sat", "dddd": "Saturday" }];
        const ampm = function (d, f) {
            // @ts-ignore
            return d.getHours() >= 12 ? ampms["p" + f] : ampms["a" + f];
        };
        let date = new Date(v);
        let hh = date.getHours() > 12 ? date.getHours() - 12 : date.getHours();
        d = d.replace("tt", ampm(date, "tt"));
        d = d.replace("t", ampm(date, "t"));
        d = d.replace("yyyy", date.getFullYear().toString());
        d = d.replace("yy", date.getFullYear().toString().slice(2));
        d = d.replace("mmmm", months[date.getMonth()]["mmmm"]);
        d = d.replace("mmm", months[date.getMonth()]["mmm"]);
        d = d.replace("mm", months[date.getMonth()]["mm"]);
        d = d.replace("m", date.getMonth().toString());
        d = d.replace("dddd", days[date.getDay()]["dddd"]);
        d = d.replace("ddd", days[date.getDay()]["ddd"]);
        d = d.replace("dd", String(date.getDate()).padStart(2, "0"));
        d = d.replace("d", date.getDate().toString());
        d = d.replace("ss", String(date.getSeconds()).padStart(2, "0"));
        d = d.replace("x", suffix[date.getDate() - 1]);
        d = d.replace("hh", String(hh).padStart(2, "0"));
        d = d.replace("HH", String(date.getHours()).padStart(2, "0"));
        d = d.replace("ii", String(date.getMinutes()).padStart(2, "0"));
        return d;
    }
}
cjs.DateFormatter = DateFormatter;
class MoneyFormatter {
    /**
     const money = new Intl.NumberFormat('de-CH',
     { style:'currency', currency: 'CHF' });
     const percent = new Intl.NumberFormat('de-CH',
     { style:'percent', maximumFractionDigits: 1, signDisplay: "always"});
     which than can be used as:

     money.format(1234.50); // output CHF 1'234.50
     percent.format(0.083);  // output +8.3%
     **/
    format(v, d) {
        console.log("decorating money", v, d);
        const formatter = new Intl.NumberFormat('en-GB', {
            style: 'currency',
            currency: d,
            // These options are needed to round to whole numbers if that's what you want.
            //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)
            //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)
        });
        return formatter.format(v);
    }
}
cjs.MoneyFormatter = MoneyFormatter;
let formatters = new Map();
formatters.set("default", new DefaultFormatter());
formatters.set("date", new DateFormatter());
formatters.set("money", new MoneyFormatter());
function getFormatter(type = "default") {
    if (!formatters.has(type)) {
        return new DefaultFormatter();
    }
    return formatters.get(type);
}
cjs.getFormatter = getFormatter;
function Fetch(url, options) {
    return window.fetch(url, options).then((response) => {
        return response.json().then(data => {
            if (!response.ok) {
                throw new Error(data.message);
            }
            return data;
        });
    });
}
cjs.Fetch = Fetch;
cjs.GetRequest = { method: "GET", headers: { "Content-Type": "application/json" } };
cjs.PostRequest = { method: "POST", headers: { "Content-Type": "application/json" } };
cjs.DeleteRequest = { method: "DELETE", headers: { "Content-Type": "application/json" } };

export { AbstractCustomElement_1 as AbstractCustomElement, MagicView_1 as MagicView, MagicViewModel_1 as MagicViewModel, cjs as default };
